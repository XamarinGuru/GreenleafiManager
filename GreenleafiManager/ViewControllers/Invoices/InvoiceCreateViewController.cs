// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using UIKit;
using System.Linq;
using System.Collections.Generic;


namespace GreenleafiManager
{
	public partial class InvoiceCreateViewController : UIViewController
	{
		public static LoadingOverlay loadingOverlay;
		CGRect currentFrame;
		UITextField txtInvoiceNUmber, txtInvoiceDate, txtCustomer, txtSalesPerson, txtLocation;
		public UITextField txtOrderTotal;
		public Invoice objInvoice = new Invoice();
		public List<Item> itemsList = new List<Item>();
		UIButton itemsButton, btnAddItem;
		ModalPickerViewController modalPicker;
		UIAlertController salesPersonActionSheet, locationActionSheet, customerActionSheet;
		UITableView itemTable;
		NSDateFormatter dateFormatter;

		private string _AddedItemID;

		UIAlertController alertWithTextBox;


		public InvoiceCreateViewController(IntPtr handle) : base(handle)
		{
		}
		public async override void ViewDidLoad()
		{
			base.ViewDidLoad();
			currentFrame = this.View.Bounds;
			var bounds = UIScreen.MainScreen.Bounds;
			loadingOverlay = new LoadingOverlay(bounds, "processing...");
			ShowLoading();
			CreateDateActionSheet();
			CreateSalesPersonActionSheet();
			CreateLocationActionSheet();
			CreateInvoiceView();

			string invoiceNumber = "10001";
			var nextNumber = AzureService.InvoiceService.GetNextInvoiceNumber();
			if (!string.IsNullOrEmpty(nextNumber))
			{
				invoiceNumber = nextNumber;
				txtInvoiceNUmber.Text = invoiceNumber;
			}
			else
			{
				UIAlertController innerAlert = UIAlertController.Create("Connection error", "cannot connect to server.", UIAlertControllerStyle.Alert);

				PresentViewController(innerAlert, true, null);
				innerAlert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (actionInnerOk) =>
				{
					CancelItem();
				}));
			}

			UIBarButtonItem backBtn = new UIBarButtonItem("< Back", UIBarButtonItemStyle.Plain, delegate
			{
				UIAlertController alert = UIAlertController.Create("Leaving the page?", "If you leave the page before saving," +
																	   " all changes will be lost.", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (actionCancel) =>
				{
				}));
				alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, (actionOK) =>
				{
					CancelItem();
					this.NavigationController.PopViewController(true);
				}));
				PresentViewController(alert, true, null);

			});
			this.NavigationItem.LeftBarButtonItem = backBtn;
		}

		public async override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
			if (loadingOverlay != null)
			{
				if (loadingOverlay.Alpha == 0)
					ShowLoading();
			}
			if (AzureService.InvoiceService.Customer != null && objInvoice != null)
			{
				objInvoice.CustomerId = AzureService.InvoiceService.Customer.Id;
				objInvoice.Customer = (Customer)AzureService.InvoiceService.Customer;
				txtCustomer.Text = AzureService.InvoiceService.Customer.FirstName + " " + AzureService.InvoiceService.Customer.LastName;
				AzureService.InvoiceService.Customer = null;
			}
			AddItems();

			if (loadingOverlay != null)
				loadingOverlay.Hide();
		}

		void AddItems()
		{
			if (AzureService.InvoiceService.ItemsList != null && AzureService.InvoiceService.ItemsList.Count > 0 && itemTable != null)
			{
				foreach (var item in AzureService.InvoiceService.ItemsList)
				{
					if (!itemsList.Any(x => x.Id == item.Id))
					{
						itemsList.Add(item);
						UIAlertController alert = UIAlertController.Create("Enter Sale Price", "", UIAlertControllerStyle.Alert);
						UITextField field = null;
						UITextField descriptionField = null;
						alert.AddTextField((textField) =>
						{
							field = textField;
							field.Placeholder = "Sale Price";
							field.AutocorrectionType = UITextAutocorrectionType.No;
							field.KeyboardType = UIKeyboardType.NumberPad;
							field.ReturnKeyType = UIReturnKeyType.Done;
							field.ClearButtonMode = UITextFieldViewMode.WhileEditing;

						});

						_AddedItemID = item.Id;

						alert.AddAction(UIAlertAction.Create("Next", UIAlertActionStyle.Default, (actionOK) =>
						{
							double newPrice = 0;

							Double.TryParse(field.Text, out newPrice);



							if (newPrice > 0)
							{
								itemsList.FirstOrDefault(x => x.Id == _AddedItemID).Price = newPrice;
							}
							else
							{
								UIAlertController innerAlert = UIAlertController.Create("Invalid Sale Price Input", "Please enter a valid number", UIAlertControllerStyle.Alert);

								PresentViewController(innerAlert, true, null);
								innerAlert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (actionInnerOk) =>
								{
									PresentViewController(alert, true, null);
								}));
								return;
							}

							UIAlertController descAlert = UIAlertController.Create("Update Description for Invoice", "", UIAlertControllerStyle.Alert);

							descAlert.AddTextField((textField) =>
						{
							descriptionField = textField;
							descriptionField.Text = item.Description;
							descriptionField.AutocorrectionType = UITextAutocorrectionType.Yes;
							descriptionField.KeyboardType = UIKeyboardType.NumberPad;
							descriptionField.ReturnKeyType = UIReturnKeyType.Done;
							descriptionField.ClearButtonMode = UITextFieldViewMode.WhileEditing;

						});
							descAlert.AddAction(UIAlertAction.Create("Done", UIAlertActionStyle.Default, (actionDone) =>
						{
						itemsList.FirstOrDefault(x => x.Id == _AddedItemID).Price = Convert.ToDouble(field.Text);
							itemsList.FirstOrDefault(x => x.Id == _AddedItemID).InvoiceDescription = descriptionField.Text;
							itemTable.Source = new InvoiceItemTableSource(AzureService.InvoiceService.ItemsList, this);
							itemTable.ReloadData();
							double val = AzureService.InvoiceService.ItemsList.Sum(x => x.ItemSalePrice);
							txtOrderTotal.Text = val.ToString("C");
						}));
							PresentViewController(descAlert, true, null);



						}));
						PresentViewController(alert, true, null);
					}
				}

				itemTable.Source = new InvoiceItemTableSource(AzureService.InvoiceService.ItemsList, this);
				itemTable.ReloadData();
				double price = AzureService.InvoiceService.ItemsList.Sum(x => x.ItemSalePrice);
				txtOrderTotal.Text = price.ToString("C");
			}
		}
		public void ShowLoading()
		{
			loadingOverlay.Alpha = 1;
			View.Add(loadingOverlay);
		}

		//salesPersonActionSheet.AddAction(UIAlertAction.Create("Bond", UIAlertActionStyle.Default, (action) => OnSalesPersonSelection(action.Title)));
		async Task CreateSalesPersonActionSheet()
		{
			var userService = AzureService.UserService;

			salesPersonActionSheet = UIAlertController.Create("Sales Person", "Select sales person", UIAlertControllerStyle.ActionSheet);
			//await userService.InitializeStoreAsync();
			if (AzureService.UserService.Users != null)
			{
				foreach (User item in AzureService.UserService.Users)
				{
					salesPersonActionSheet.AddAction(UIAlertAction.Create(item.FirstName, UIAlertActionStyle.Default, (action) =>
						{
							txtSalesPerson.Text = action.Title;
							//customerActionSheet.sele
							objInvoice.User = item;
							objInvoice.UserId = item.Id;
						}));
				}
			}

			//salesPersonActionSheet = UIAlertController.Create("Sales Person", "Select Person", UIAlertControllerStyle.ActionSheet);
		}
		//NG: Customer action sheet
		void CreateCustomerActionSheet()
		{
			MasterCustomerViewController mivc = this.Storyboard.InstantiateViewController("MasterCustomerViewController") as MasterCustomerViewController;
			mivc.isAddCustomer = true;
			this.NavigationController.PushViewController(mivc, true);
		}

		async Task CreateLocationActionSheet()
		{
			locationActionSheet = UIAlertController.Create("Location", "Select Location", UIAlertControllerStyle.ActionSheet);

			await AzureService.LocationService.UpdateLocationsFromAzure();
			if (AzureService.LocationService.Locations != null)
			{
				foreach (Location item in AzureService.LocationService.Locations)
				{
					locationActionSheet.AddAction(UIAlertAction.Create(item.Name, UIAlertActionStyle.Default, (action) =>
						{
							txtLocation.Text = action.Title;
							//customerActionSheet.sele
							//objInvoice.LocationName = item.Name;
							objInvoice.LocationId = item.Id;
						}));
				}
			}

		}

		void CreateDateActionSheet()
		{
			modalPicker = new ModalPickerViewController(ModalPickerType.Date, "Select Date", this)
			{
				HeaderBackgroundColor = UIColor.Red,
				HeaderTextColor = UIColor.White,
				TransitioningDelegate = new ModalPickerTransitionDelegate(),
				ModalPresentationStyle = UIModalPresentationStyle.Custom
			};
			modalPicker.DatePicker.Mode = UIDatePickerMode.Date;
			dateFormatter = new NSDateFormatter()
			{
				DateFormat = "MMMM dd, yyyy"
			};
			modalPicker.OnModalPickerDismissed += (s, ea) =>
			{
				txtInvoiceDate.Text = dateFormatter.ToString(modalPicker.DatePicker.Date);
			};
		}

		void OnLocationSelected(string title)
		{
			if (txtLocation != null)
				txtLocation.Text = title;

		}

		void OnSalesPersonSelection(string title)
		{
			txtSalesPerson.Text = title;
			//objInvoice.User.FirstName = title;
			objInvoice.UserId = title;
		}
		//Creating new invoice view
		void CreateInvoiceView()
		{
			var topView1 = new UIView(new CGRect(100, 65, currentFrame.Width - 200, 110));
			var lblInvoiceNumber = new UILabel(new CGRect(20, 10, topView1.Frame.Width / 2 - 30, 30));
			lblInvoiceNumber.Text = "Invoice Number *";
			topView1.Add(lblInvoiceNumber);

			txtInvoiceNUmber = new UITextField(new CGRect(20, 45, topView1.Frame.Width / 2 - 30, 50));
			txtInvoiceNUmber.ToGreenLeafTextField();
			txtInvoiceNUmber.Placeholder = "Invoice Number";
			txtInvoiceNUmber.Enabled = false;
			topView1.InsertSubviewBelow(txtInvoiceNUmber, lblInvoiceNumber);

			var lblInvoiceDate = new UILabel(new CGRect(topView1.Frame.Width / 2 + 10, 10, topView1.Frame.Width / 2 - 30, 30));
			lblInvoiceDate.Text = "Invoice Date *";
			topView1.Add(lblInvoiceDate);

			txtInvoiceDate = new UITextField(new CGRect(topView1.Frame.Width / 2 + 10, 45, topView1.Frame.Width / 2 - 85, 50));
			txtInvoiceDate.ToGreenLeafTextField();
			txtInvoiceDate.Placeholder = "Invoice Date";
			txtInvoiceDate.Enabled = false;
			topView1.InsertSubviewBelow(txtInvoiceDate, lblInvoiceDate);
			Add(topView1);

			if (string.IsNullOrEmpty(txtInvoiceDate.Text))
				txtInvoiceDate.Text = dateFormatter.ToString(DateTime.Now.Date.ToNSDate());

			var selectDateButton = new UIButton(new CGRect(topView1.Frame.Width - 75, txtInvoiceDate.Frame.Y, 50, 50));
			selectDateButton.SetTitle("...", UIControlState.Normal);
			selectDateButton.BackgroundColor = UIColor.Gray;
			selectDateButton.SetTitleColor(UIColor.White, UIControlState.Normal);
			selectDateButton.TouchUpInside += (sender, e) =>
			{
				PresentViewController(modalPicker, true, null);
			};
			topView1.Add(selectDateButton);

			//2nd Row
			var topView2 = new UIView(new CGRect(100, 155, currentFrame.Width - 200, 110));
			var lblSalesPerson = new UILabel(new CGRect(20, 10, topView2.Frame.Width / 2 - 30, 30));
			lblSalesPerson.Text = "Sales Person *";
			topView2.Add(lblSalesPerson);

			txtSalesPerson = new UITextField(new CGRect(20, 45, topView2.Frame.Width / 2 - 60, 50));
			txtSalesPerson.ToGreenLeafTextField();
			txtSalesPerson.Enabled = false;

			txtSalesPerson.Placeholder = "Sales Person";
			topView2.InsertSubviewBelow(txtSalesPerson, lblSalesPerson);

			var selectSalesPersonButton = new UIButton(new CGRect(txtSalesPerson.Frame.Width, txtSalesPerson.Frame.Y, 50, 50));
			selectSalesPersonButton.SetTitle("...", UIControlState.Normal);
			selectSalesPersonButton.BackgroundColor = UIColor.Gray;
			selectSalesPersonButton.SetTitleColor(UIColor.White, UIControlState.Normal);
			selectSalesPersonButton.TouchUpInside += (sender, e) =>
			{
				//Sales Action Sheet
				//actionSheetDatePicker?.Show();
				UIPopoverPresentationController presentationPopover = salesPersonActionSheet.PopoverPresentationController;
				if (presentationPopover != null)
				{
					//NG: change presentationPopover.SourceView = selectDateButton;
					//NG: change presentationPopover.SourceRect = selectDateButton.Bounds;

					presentationPopover.SourceView = selectSalesPersonButton;
					presentationPopover.SourceRect = selectSalesPersonButton.Bounds;
					presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Down;
				}
				PresentViewController(salesPersonActionSheet, true, null);
			};
			topView2.Add(selectSalesPersonButton);

			var lblLocation = new UILabel(new CGRect(topView2.Frame.Width / 2 + 10, 10, topView2.Frame.Width / 2 - 30, 30));
			lblLocation.Text = "Location *";
			topView2.Add(lblLocation);

			txtLocation = new UITextField(new CGRect(topView2.Frame.Width / 2 + 10, 45, topView2.Frame.Width / 2 - 60, 50));
			txtLocation.Placeholder = "Location";
			txtLocation.Enabled = false;
			txtLocation.ToGreenLeafTextField();
			topView2.InsertSubviewBelow(txtLocation, lblLocation);

			var selectLocationButton = new UIButton(new CGRect(topView1.Frame.Width - 75, txtLocation.Frame.Y, 50, 50));
			selectLocationButton.SetTitle("...", UIControlState.Normal);
			selectLocationButton.BackgroundColor = UIColor.Gray;
			selectLocationButton.SetTitleColor(UIColor.White, UIControlState.Normal);
			selectLocationButton.TouchUpInside += (sender, e) =>
			{
				//Sales Action Sheet
				//actionSheetDatePicker?.Show();

				UIPopoverPresentationController presentationPopover = locationActionSheet.PopoverPresentationController;
				if (presentationPopover != null)
				{
					presentationPopover.SourceView = selectLocationButton;
					presentationPopover.SourceRect = selectLocationButton.Bounds;
					presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Down;
				}
				PresentViewController(locationActionSheet, true, null);
			};
			topView2.Add(selectLocationButton);
			Add(topView2);


			//3rd Row
			var topView3 = new UIView(new CGRect(100, 245, currentFrame.Width - 200, 110));
			var lblCustomer = new UILabel(new CGRect(20, 10, topView3.Frame.Width / 2 - 30, 30));
			lblCustomer.Text = "Customer *";
			topView3.Add(lblCustomer);

			txtCustomer = new UITextField(new CGRect(20, 45, topView3.Frame.Width / 2 - 80, 50));
			txtCustomer.ToGreenLeafTextField();
			txtCustomer.Placeholder = "Customer";
			txtCustomer.Enabled = false;
			topView3.InsertSubviewBelow(txtCustomer, lblCustomer);

			var selectCustomerButton = new UIButton(new CGRect(txtCustomer.Frame.X + txtCustomer.Frame.Width, txtCustomer.Frame.Y, 50, 50));
			selectCustomerButton.SetTitle("...", UIControlState.Normal);
			selectCustomerButton.BackgroundColor = UIColor.Gray;
			selectCustomerButton.SetTitleColor(UIColor.White, UIControlState.Normal);
			selectCustomerButton.TouchUpInside += (sender, e) =>
			{
				CreateCustomerActionSheet();

				//UIPopoverPresentationController presentationPopover = customerActionSheet.PopoverPresentationController;
				//if (presentationPopover != null)
				//{
				//	presentationPopover.SourceView = selectCustomerButton;
				//	presentationPopover.SourceRect = selectCustomerButton.Bounds;
				//	presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Any;
				//}
				//PresentViewController(customerActionSheet, true, null);
			};
			topView3.Add(selectCustomerButton);

			var lblTotalOrder = new UILabel(new CGRect(topView3.Frame.Width / 2 + 10, 10, topView3.Frame.Width / 2 - 30, 30));
			lblTotalOrder.Text = "Items Total *";
			topView3.Add(lblTotalOrder);

			txtOrderTotal = new UITextField(new CGRect(topView3.Frame.Width / 2 + 10, 45, topView3.Frame.Width / 2 - 30, 50));
			txtOrderTotal.Placeholder = "Items Total";
			txtOrderTotal.Enabled = false;
			txtOrderTotal.ToGreenLeafTextField();
			topView3.InsertSubviewBelow(txtOrderTotal, lblTotalOrder);

			Add(topView3);

			//Items
			itemsButton = new UIButton(new CGRect(120, 370, currentFrame.Width - 240, 50));
			itemsButton.SetTitle("Items", UIControlState.Normal);
			itemsButton.BackgroundColor = UIColor.LightGray;
			Add(itemsButton);

			//Add New Item
			btnAddItem = new UIButton(new CGRect(120, 430, currentFrame.Width / 2 - 130, 50));
			btnAddItem.SetTitle("Search for Items", UIControlState.Normal);
			btnAddItem.BackgroundColor = UIColor.White;
			btnAddItem.Layer.BorderWidth = 1;
			btnAddItem.Layer.BorderColor = UIColor.Gray.CGColor;
			btnAddItem.SetTitleColor(UIColor.Gray, UIControlState.Normal);
			btnAddItem.ClipsToBounds = true;

			//SKU Item
			var btnAddbySKU = new UIButton(new CGRect(btnAddItem.Frame.X + btnAddItem.Frame.Width + 20, 430, currentFrame.Width / 2 - 130, 50));
			btnAddbySKU.SetTitle("Add by SKU", UIControlState.Normal);
			btnAddbySKU.BackgroundColor = UIColor.White;
			btnAddbySKU.Layer.BorderWidth = 1;
			btnAddbySKU.Layer.BorderColor = UIColor.Gray.CGColor;
			btnAddbySKU.SetTitleColor(UIColor.Gray, UIControlState.Normal);
			btnAddbySKU.ClipsToBounds = true;
			//rzee
			//NG : Add click
			btnAddbySKU.TouchUpInside += (object sender, EventArgs e) =>
			{
				//var items = await AzureService.InventoryService.GetLocalNSItems();
				//var singleItem = items?.Where(x=>x.Sku==);
				alertWithTextBox = UIAlertController.Create("Add Item", "Enter SKU Number", UIAlertControllerStyle.Alert);
				alertWithTextBox.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null));
				alertWithTextBox.AddAction(UIAlertAction.Create("Add Item", UIAlertActionStyle.Default, async (UIAlertAction obj) => await FetchItem()));
				alertWithTextBox.AddTextField((field) =>
				{
					field.Placeholder = "SKU";
					field.ToNumeric();
				});
				PresentViewController(alertWithTextBox, animated: true, completionHandler: null);
			};

			//NG : Add click
			btnAddItem.TouchUpInside += ((sender, e) =>
				{
					//InvoiceService.isInvoiceSelected = true;
					MasterInventoryViewController mivc = this.Storyboard.InstantiateViewController("MasterInventoryViewController") as MasterInventoryViewController;
					mivc.isInvoiceSelected = true;
					this.NavigationController.PushViewController(mivc, true);
				});
			Add(btnAddItem);
			Add(btnAddbySKU);

			//Items in Table
			itemTable = new UITableView(new CGRect(120, 490, currentFrame.Width - 240, 150));
			itemTable.SeparatorStyle = UITableViewCellSeparatorStyle.None;
			nfloat vFullWidth = itemTable.Frame.Width;
			var headerView = new UIView(new CGRect(0, 0, currentFrame.Width - 240, 40));

			var lblItemCode = new UILabel(new CGRect(0, 0, vFullWidth / 6, 40))
			{
				Text = "ITEM CODE",
			};
			lblItemCode.ToGreenLeafLabel();
			headerView.Add(lblItemCode);

			var lblMetalCode = new UILabel(new CGRect(lblItemCode.Frame.X + lblItemCode.Frame.Width - 1, 0, vFullWidth / 6, 40))
			{
				Text = "METAL CODE",
			};
			lblMetalCode.ToGreenLeafLabel();
			headerView.Add(lblMetalCode);

			var lblSKU = new UILabel(new CGRect(lblMetalCode.Frame.X + lblMetalCode.Frame.Width - 1, 0, vFullWidth / 6, 40))
			{
				Text = "SKU",
			};
			lblSKU.ToGreenLeafLabel();
			headerView.Add(lblSKU);

			var lblAmount = new UILabel(new CGRect(lblSKU.Frame.X + lblSKU.Frame.Width - 1, 0, vFullWidth / 6, 40))
			{
				Text = "AMOUNT",
			};
			lblAmount.ToGreenLeafLabel();
			headerView.Add(lblAmount);

			var lblDes = new UILabel(new CGRect(lblAmount.Frame.X + lblAmount.Frame.Width - 1, 0, vFullWidth / 3, 40))
			{
				Text = "DESCRIPTION",
			};
			lblDes.ToGreenLeafLabel();
			headerView.Add(lblDes);
			itemTable.TableHeaderView = headerView;
			Add(itemTable);

			//Save Button
			var saveButton = new UIButton(new CGRect(120, 650, currentFrame.Width / 2 - 120, 50));
			saveButton.SetTitle("Save", UIControlState.Normal);
			saveButton.BackgroundColor = UIColor.White;
			saveButton.Layer.BorderWidth = 1;
			saveButton.Layer.BorderColor = UIColor.Gray.CGColor;
			saveButton.SetTitleColor(UIColor.Gray, UIControlState.Normal);
			saveButton.ClipsToBounds = true;
			//NG : Save Invoice
			saveButton.TouchUpInside += ((sender, e) =>
				{
					SaveInvoice();
				});
			Add(saveButton);

			//Cancel Button
			var cancelButton = new UIButton(new CGRect(currentFrame.Width / 2 + 10, 650, currentFrame.Width / 2 - 130, 50));
			cancelButton.SetTitle("Cancel", UIControlState.Normal);
			cancelButton.BackgroundColor = UIColor.White;
			cancelButton.Layer.BorderWidth = 1;
			cancelButton.Layer.BorderColor = UIColor.Gray.CGColor;
			cancelButton.SetTitleColor(UIColor.Gray, UIControlState.Normal);
			cancelButton.ClipsToBounds = true;
			Add(cancelButton);
			cancelButton.TouchUpInside += ((sender, e) =>
			{
				UIAlertController alert = UIAlertController.Create("Cancel", "If you hit Ok, the data in this page will be lost.", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (actionCancel) =>
				{
				}));
				alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, (actionOK) =>
				{
					CancelItem();
				}));
				PresentViewController(alert, true, null);

			});
		}

		async Task FetchItem()
		{
			ShowLoading();
			try
			{
				if (AzureService.InventoryService.Items != null && alertWithTextBox != null)
				{
					var item = new Item();
					string sku = alertWithTextBox.TextFields[0].Text.Trim();
					if (AzureService.InventoryService.Items.Any(x => x.Sku.Equals(sku) && !x.IsSold))
					{
						item = AzureService.InventoryService.Items.FirstOrDefault(x => x.Sku.Equals(sku) && !x.IsSold);
						await AzureService.InventoryService.MarkItemSoldAsync(item, true);
						item.IsSold = true;
						item.AddNewFromInvoice = true;
						AzureService.InvoiceService.ItemsList.Insert(0, item);
						AddItems();
					}
					else
					{
						loadingOverlay.Hide();
						var alert = new UIAlertView("Error", "Item is sold or doesn't exist.", null, "Ok");
						alert.Show();
						return;
					}
				}
			}
			catch (Exception ex)
			{
				//RMR TODO Umm this is bad?
			}
			finally
			{
				loadingOverlay.Hide();
			}
		}

		//NG : Save Invoice
		private async void SaveInvoice()
		{
			ShowLoading();
			if (!ValidateBeforeSavingOrCreating(objInvoice))
			{
				loadingOverlay.Hide();
				return;
			}
			
			objInvoice.Number = txtInvoiceNUmber.Text;
			objInvoice.Date = txtInvoiceDate.Text;
			if (AzureService.InvoiceService.ItemsList != null && AzureService.InvoiceService.ItemsList.Count > 0)
			{
				objInvoice.Items = AzureService.InvoiceService.ItemsList.ToList();
				AzureService.InvoiceService.ItemsList.Clear();
				itemsList.Clear();
			}
			if (!string.IsNullOrEmpty(txtOrderTotal.Text))
			{
				objInvoice.OrderTotal = Convert.ToDecimal(txtOrderTotal.Text.Replace("$",""));
				//objInvoice.TotalPrice = Convert.ToDouble(objInvoice.OrderTotal + (decimal)(1+AzureService.InvoiceService.SalesTax));
				objInvoice.TotalPrice = Math.Round(Convert.ToDouble(objInvoice.OrderTotal + (decimal)(objInvoice.OrderTotal * objInvoice.LocationTax)),2);
			}

			InvoiceEditViewController ivc = this.Storyboard.InstantiateViewController("InvoiceEditViewController") as InvoiceEditViewController;
			ivc.objInvoice = objInvoice;
			ivc.isFromCreatePage = true;
			loadingOverlay.Hide();
			this.NavigationController.PushViewController(ivc, true);

		}

		private async Task CancelItem()
		{
			foreach (var item in AzureService.InvoiceService.ItemsList)
			{
				if (item.AddNewFromInvoice)
				{
					item.AddNewFromInvoice = false;
					await AzureService.InventoryService.MarkItemSoldAsync(item, false);
				}
			}
			txtSalesPerson.Text = txtLocation.Text = txtCustomer.Text = txtOrderTotal.Text = string.Empty;
			objInvoice = new Invoice();
			AzureService.InvoiceService.ItemsList.Clear();
			itemsList.Clear();
			itemTable.Source = new InvoiceItemTableSource(AzureService.InvoiceService.ItemsList, this);
			itemTable.ReloadData();
			this.NavigationController.PopViewController(true);
		}
		private bool ValidateBeforeSavingOrCreating(Invoice obj)
		{
			if (string.IsNullOrEmpty(txtSalesPerson.Text))
			{
				var alert = UIAlertController.Create("Invoice", "Sales person is required", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (actionOK) => { return; }));
				PresentViewController(alert, animated: true, completionHandler: null);
				return false;
			}
			if (String.IsNullOrEmpty(obj.LocationName))// == null)
			{
				var alert = UIAlertController.Create("Invoice", "Location is required", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (actionOK) => { return; }));
				PresentViewController(alert, animated: true, completionHandler: null);
				return false;
			}
			if (obj.Customer == null)
			{
				var alert = UIAlertController.Create("Invoice", "Customer is required", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (actionOK) => { return; }));
				PresentViewController(alert, animated: true, completionHandler: null);
				return false;
			}
			if (AzureService.InvoiceService.ItemsList == null || AzureService.InvoiceService.ItemsList.Count == 0)
			{
				var alert = UIAlertController.Create("Invoice", "At least one item must be added to the invoice.", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (actionOK) => { return; }));
				PresentViewController(alert, animated: true, completionHandler: null);
				return false;
			}
			if (string.IsNullOrEmpty(txtOrderTotal.Text))
			{
				var alert = UIAlertController.Create("Invoice", "Orders total is required", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (actionOK) => { return; }));
				PresentViewController(alert, animated: true, completionHandler: null);
				return false;
			}


			return true;
		}
	}
}